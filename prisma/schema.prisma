generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//
// User, Account, VerficationCode, Follow
//

model User {
  id                  String        @id @default(cuid())
  email               String?       @unique
  emailVerified       Boolean       @default(false)
  phoneNumber         String?       @unique
  phoneNumberVerified Boolean       @default(false)
  password            String?
  refreshToken        String        @default("")
  avatar              String        @default("")
  nickname            String        @unique
  type                String        @default("")
  agreeOlder14Years   Boolean       @default(false)
  agreeTerms          Boolean       @default(false)
  agreePrivacy        Boolean       @default(false)
  agreeMarketing      Boolean       @default(false)
  accounts            Account[]
  cafeSaves           CafeSave[]
  cafeReviews         CafeReview[]
  themeSaves          ThemeSave[]
  themeReviews        ThemeReview[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("users")
}

model Account {
  id        String   @id @default(cuid())
  provider  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accounts")
}

model VerificationCode {
  id         String                 @id @default(cuid())
  identifier String
  code       String
  status     VerificationStatusType @default(PENDING)
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@map("verification_codes")
}

//
// Cafe, Genre, Theme
//

model Cafe {
  id               String       @id @default(cuid())
  naverMapId       String       @default("")
  areaA            String
  areaB            String
  name             String
  intro            String?      @db.Text
  addressLine      String       @default("")
  lat              Float        @default(0.0)
  lng              Float        @default(0.0)
  images           Json
  website          String       @default("")
  tel              String       @default("")
  openingHours     Json
  reviewsRating    Float        @default(0.0)
  reviewsCount     Int          @default(0)
  blogReviewsCount Int          @default(0)
  themes           Theme[]
  view             Int          @default(0)
  saves            CafeSave[]
  reviews          CafeReview[]
  blogReviews      BlogReview[]
  scrapper         Scrapper?
  status           StatusType   @default(PROCESSING)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("cafes")
}

model CafeSave {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  cafe      Cafe     @relation(fields: [cafeId], references: [id])
  cafeId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cafe_saves")
}

model CafeReview {
  id        String   @id @default(cuid())
  rating    Float    @default(5)
  text      String?  @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  cafe      Cafe     @relation(fields: [cafeId], references: [id])
  cafeId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cafe_reviews")
}

model Genre {
  id        String   @id
  themes    Theme[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("genre")
}

model Theme {
  id               String        @id @default(cuid())
  cafe             Cafe          @relation(fields: [cafeId], references: [id])
  cafeId           String
  name             String
  displayName      String        @default("")
  intro            String?       @db.Text
  thumbnail        String        @default("")
  genre            Genre[]
  price            Int           @default(0)
  lockingRatio     Int           @default(0)
  during           Int           @default(0)
  minPerson        Int           @default(0)
  maxPerson        Int           @default(0)
  level            Float         @default(0.0)
  fear             Int           @default(0)
  activity         Int           @default(0)
  detailUrl        String        @default("")
  reservationUrl   String        @default("")
  openDate         String        @default("")
  reviewsRating    Float         @default(0.0)
  reviewsLevel     Float         @default(0.0)
  reviewsFear      Float         @default(0.0)
  reviewsActivity  Float         @default(0.0)
  reviewsCount     Int           @default(0)
  blogReviewsCount Int           @default(0)
  view             Int           @default(0)
  saves            ThemeSave[]
  reviews          ThemeReview[]
  blogReviews      BlogReview[]
  status           StatusType    @default(PROCESSING)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@map("themes")
}

model ThemeSave {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  theme     Theme    @relation(fields: [themeId], references: [id])
  themeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("theme_saves")
}

model ThemeReview {
  id        String   @id @default(cuid())
  rating    Float    @default(5)
  success   Boolean  @default(false)
  level     Int      @default(0)
  fear      Int      @default(0)
  activity  Int      @default(0)
  text      String?  @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  theme     Theme    @relation(fields: [themeId], references: [id])
  themeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("theme_reviews")
}

model BlogReview {
  id        String   @id @default(cuid())
  cafe      Cafe?    @relation(fields: [cafeId], references: [id])
  cafeId    String?
  theme     Theme?   @relation(fields: [themeId], references: [id])
  themeId   String?
  title     String
  desc      String   @default("") @db.VarChar(300)
  url       String   @db.VarChar(300)
  thumbnail String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog_reviews")
}

//
// FAQ
//

model Faq {
  id        String     @id @default(cuid())
  question  String
  answer    String?    @db.Text
  position  Int        @default(0)
  status    StatusType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("faq")
}

//
// Crawling
//

model Scrapper {
  id                   String     @id @default(cuid())
  url                  String
  comment              String     @default("")
  cafe                 Cafe?      @relation(fields: [cafeId], references: [id])
  cafeId               String?    @unique
  groupSelector        String     @default("")
  themeSelector        String     @default("")
  themePostProcessing  String     @default("")
  branchSelector       String     @default("")
  branchPostProcessing String     @default("")
  metric               Metric?
  status               StatusType @default(PROCESSING)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("scrappers")
}

model Metric {
  id              String     @id @default(cuid())
  scrapper        Scrapper?  @relation(fields: [scrapperId], references: [id])
  scrapperId      String?    @unique
  currentThemes   Json?
  scrappedThemes  Json?
  differentThemes Json?
  status          MetricType
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("metrics")
}

//
// Types
//

enum VerificationStatusType {
  PENDING
  VERIFIED
  INVALID
  COMPLETE
}

enum StatusType {
  PROCESSING
  PUBLISHED
  DELETED
}

enum MetricType {
  SOMETHING_WRONG
  NOTHING_WRONG
}
